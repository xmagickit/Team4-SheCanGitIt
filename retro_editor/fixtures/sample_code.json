
[
  {
    "model": "retro_editor.codesample",
    "pk": 1,
    "fields": {
      "title": "Retro Snake Game",
      "description": "Classic Snake game in a retro style. Use arrow keys to control the snake!",
      "language": "js",
      "code_content": "// Snake Game by Carol Shaw\nconst canvas = document.createElement('canvas');\ncanvas.width = 400;\ncanvas.height = 400;\ndocument.getElementById('output').appendChild(canvas);\nconst ctx = canvas.getContext('2d');\n\n// Game variables\nlet snake = [{x: 10, y: 10}];\nlet food = {x: 5, y: 5};\nlet direction = 'right';\nlet score = 0;\nconst gridSize = 20;\nconst gridWidth = canvas.width / gridSize;\nconst gridHeight = canvas.height / gridSize;\n\n// Game controls\ndocument.addEventListener('keydown', (e) => {\n  if (e.key === 'ArrowUp' && direction !== 'down') direction = 'up';\n  if (e.key === 'ArrowDown' && direction !== 'up') direction = 'down';\n  if (e.key === 'ArrowLeft' && direction !== 'right') direction = 'left';\n  if (e.key === 'ArrowRight' && direction !== 'left') direction = 'right';\n});\n\n// Draw functions\nfunction drawSnake() {\n  ctx.fillStyle = '#FFB7C5'; // Retro pink\n  snake.forEach(segment => {\n    ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize, gridSize);\n  });\n}\n\nfunction drawFood() {\n  ctx.fillStyle = '#E0B1CB'; // Retro highlight\n  ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize, gridSize);\n}\n\nfunction drawScore() {\n  ctx.fillStyle = '#FFF5E1'; // Retro cream\n  ctx.font = '16px monospace';\n  ctx.fillText(`Score: ${score}`, 10, 30);\n}\n\n// Game logic\nfunction moveSnake() {\n  const head = {x: snake[0].x, y: snake[0].y};\n  \n  switch(direction) {\n    case 'up': head.y--; break;\n    case 'down': head.y++; break;\n    case 'left': head.x--; break;\n    case 'right': head.x++; break;\n  }\n  \n  // Check for wall collision\n  if (head.x < 0 || head.y < 0 || head.x >= gridWidth || head.y >= gridHeight) {\n    gameOver();\n    return;\n  }\n  \n  // Check for self collision\n  if (snake.some(segment => segment.x === head.x && segment.y === head.y)) {\n    gameOver();\n    return;\n  }\n  \n  snake.unshift(head);\n  \n  // Check for food collision\n  if (head.x === food.x && head.y === food.y) {\n    score += 10;\n    generateFood();\n  } else {\n    snake.pop();\n  }\n}\n\nfunction generateFood() {\n  food = {\n    x: Math.floor(Math.random() * gridWidth),\n    y: Math.floor(Math.random() * gridHeight)\n  };\n  \n  // Make sure food doesn't spawn on snake\n  while (snake.some(segment => segment.x === food.x && segment.y === food.y)) {\n    food = {\n      x: Math.floor(Math.random() * gridWidth),\n      y: Math.floor(Math.random() * gridHeight)\n    };\n  }\n}\n\nfunction gameOver() {\n  clearInterval(gameInterval);\n  ctx.fillStyle = 'rgba(45, 36, 63, 0.8)'; // Semi-transparent retro dark\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = '#FFB7C5'; // Retro pink\n  ctx.font = '24px monospace';\n  ctx.fillText('GAME OVER', canvas.width/2 - 70, canvas.height/2);\n  ctx.fillText(`Score: ${score}`, canvas.width/2 - 50, canvas.height/2 + 40);\n}\n\nfunction gameLoop() {\n  ctx.fillStyle = '#2D243F'; // Retro dark background\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  \n  moveSnake();\n  drawSnake();\n  drawFood();\n  drawScore();\n}\n\n// Start game\ngenerateFood();\nconst gameInterval = setInterval(gameLoop, 150);\n\nconsole.log(\"Use arrow keys to control the snake!\");",
      "difficulty": "intermediate",
      "created_by": "Carol Shaw",
      "featured": true
    }
  },
  {
    "model": "retro_editor.codesample",
    "pk": 2,
    "fields": {
      "title": "Retro Loading Animation",
      "description": "A nostalgic loading animation that mimics old computer systems.",
      "language": "html",
      "code_content": "<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body {\n      background-color: #2D243F;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n      font-family: monospace;\n    }\n    \n    .loading-container {\n      text-align: center;\n    }\n    \n    .loading-text {\n      color: #FFF5E1;\n      font-size: 24px;\n      margin-bottom: 20px;\n    }\n    \n    .loading-bar {\n      width: 300px;\n      height: 30px;\n      border: 4px solid #6B5B95;\n      position: relative;\n      overflow: hidden;\n    }\n    \n    .progress {\n      width: 0%;\n      height: 100%;\n      background-color: #FFB7C5;\n      animation: loading 5s infinite;\n    }\n    \n    .pixels {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      display: flex;\n    }\n    \n    .pixel {\n      flex: 1;\n      height: 100%;\n      background-color: transparent;\n      border-right: 2px solid #2D243F;\n    }\n    \n    .pixel:last-child {\n      border-right: none;\n    }\n    \n    .system-message {\n      margin-top: 20px;\n      color: #E0B1CB;\n      font-size: 14px;\n      min-height: 60px;\n    }\n    \n    @keyframes loading {\n      0% { width: 0%; }\n      20% { width: 20%; }\n      40% { width: 40%; }\n      60% { width: 60%; }\n      80% { width: 80%; }\n      100% { width: 100%; }\n    }\n    \n    .shake {\n      animation: shake 0.5s ease-in-out;\n    }\n    \n    @keyframes shake {\n      0%, 100% { transform: translateX(0); }\n      20%, 60% { transform: translateX(-5px); }\n      40%, 80% { transform: translateX(5px); }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"loading-container\">\n    <div class=\"loading-text\">LOADING...</div>\n    <div class=\"loading-bar\">\n      <div class=\"progress\"></div>\n      <div class=\"pixels\">\n        <div class=\"pixel\"></div>\n        <div class=\"pixel\"></div>\n        <div class=\"pixel\"></div>\n        <div class=\"pixel\"></div>\n        <div class=\"pixel\"></div>\n        <div class=\"pixel\"></div>\n        <div class=\"pixel\"></div>\n        <div class=\"pixel\"></div>\n        <div class=\"pixel\"></div>\n        <div class=\"pixel\"></div>\n      </div>\n    </div>\n    <div class=\"system-message\" id=\"message\"></div>\n  </div>\n  \n  <script>\n    const messages = [\n      \"Initializing system...\",\n      \"Loading color palette...\",\n      \"Connecting to network...\",\n      \"Defragmenting memory...\",\n      \"Enhancing graphical interface...\",\n      \"System ready!\"\n    ];\n    \n    const messageElement = document.getElementById('message');\n    const container = document.querySelector('.loading-container');\n    let messageIndex = 0;\n    \n    function updateMessage() {\n      if (messageIndex < messages.length) {\n        messageElement.textContent = messages[messageIndex];\n        messageIndex++;\n        \n        if (messageIndex === 3) {\n          container.classList.add('shake');\n          setTimeout(() => container.classList.remove('shake'), 500);\n        }\n        \n        setTimeout(updateMessage, 1000);\n      }\n    }\n    \n    updateMessage();\n  </script>\n</body>\n</html>",
      "difficulty": "beginner",
      "created_by": "Susan Kare",
      "featured": true
    }
  },
  {
    "model": "retro_editor.codesample",
    "pk": 3,
    "fields": {
      "title": "Text Adventure Game",
      "description": "A simple text adventure game inspired by early computer games.",
      "language": "py",
      "code_content": "# A Retro Text Adventure\n# Inspired by Roberta Williams, pioneer of adventure games\n\nclass Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.exits = {}\n        self.items = []\n\n    def add_exit(self, direction, room):\n        self.exits[direction] = room\n\n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        if item in self.items:\n            self.items.remove(item)\n            return True\n        return False\n\n    def get_details(self):\n        result = f\"\\n{self.name}\\n\"\n        result += \"=\" * len(self.name) + \"\\n\"\n        result += f\"{self.description}\\n\\n\"\n        \n        if self.items:\n            result += \"Items: \" + \", \".join(self.items) + \"\\n\"\n        \n        if self.exits:\n            result += \"Exits: \" + \", \".join(self.exits.keys()) + \"\\n\"\n        \n        return result\n\nclass Game:\n    def __init__(self):\n        self.rooms = {}\n        self.current_room = None\n        self.inventory = []\n        self.game_over = False\n        self.setup_game()\n\n    def setup_game(self):\n        # Create rooms\n        lab = Room(\"Computer Lab\", \"You are in an old computer lab filled with retro machines. The air smells of electronics and nostalgia.\")\n        hallway = Room(\"Hallway\", \"A dimly lit hallway with tech posters on the walls. You can hear a humming sound in the distance.\")\n        server_room = Room(\"Server Room\", \"A cold room filled with server racks. A series of LEDs blink in sequences.\")\n        office = Room(\"Office\", \"A cozy office with a vintage desk and computer setup. There's a bookshelf full of programming manuals.\")\n        secret_room = Room(\"Secret Room\", \"A hidden room with a central pedestal. This must be where the legendary algorithm is kept!\")\n\n        # Connect rooms\n        lab.add_exit(\"north\", hallway)\n        hallway.add_exit(\"south\", lab)\n        hallway.add_exit(\"east\", server_room)\n        hallway.add_exit(\"west\", office)\n        server_room.add_exit(\"west\", hallway)\n        office.add_exit(\"east\", hallway)\n        office.add_exit(\"bookshelf\", secret_room)\n        secret_room.add_exit(\"exit\", office)\n\n        # Add items\n        lab.add_item(\"keyboard\")\n        hallway.add_item(\"keycard\")\n        server_room.add_item(\"floppy disk\")\n        office.add_item(\"manual\")\n        secret_room.add_item(\"algorithm\")\n\n        # Register rooms\n        self.rooms = {\n            \"lab\": lab, \n            \"hallway\": hallway, \n            \"server_room\": server_room, \n            \"office\": office,\n            \"secret_room\": secret_room\n        }\n        \n        # Set starting room\n        self.current_room = lab\n\n    def move(self, direction):\n        if direction in self.current_room.exits:\n            self.current_room = self.current_room.exits[direction]\n            return True\n        else:\n            print(f\"You can't go {direction}.\")\n            return False\n\n    def take(self, item):\n        if self.current_room.remove_item(item):\n            self.inventory.append(item)\n            print(f\"You picked up the {item}.\")\n            \n            # Special case for winning\n            if item == \"algorithm\":\n                print(\"\\nCONGRATULATIONS! You found the legendary algorithm!\")\n                print(\"With this knowledge, you can continue the legacy of the pioneering women in tech.\")\n                self.game_over = True\n        else:\n            print(f\"There's no {item} here.\")\n\n    def use(self, item):\n        if item not in self.inventory:\n            print(f\"You don't have a {item}.\")\n            return\n            \n        # Special interactions\n        if item == \"keycard\" and self.current_room.name == \"Server Room\":\n            print(\"You use the keycard to access the main server.\")\n            print(\"A hidden compartment opens revealing a floppy disk!\")\n            if \"floppy disk\" not in self.current_room.items:\n                self.current_room.add_item(\"floppy disk\")\n        \n        elif item == \"manual\" and self.current_room.name == \"Office\":\n            print(\"You read through the manual and discover a secret:\")\n            print(\"The bookshelf can be moved to reveal a hidden room!\")\n            if \"bookshelf\" not in self.current_room.exits:\n                self.current_room.add_exit(\"bookshelf\", self.rooms[\"secret_room\"])\n                \n        else:\n            print(f\"You can't use the {item} here.\")\n\n    def play(self):\n        print(\"=== THE ALGORITHM QUEST ===\")\n        print(\"Find the legendary algorithm created by a pioneering woman in computer science!\")\n        print(\"Commands: go [direction], take [item], use [item], inventory, look, quit\")\n        \n        while not self.game_over:\n            print(self.current_room.get_details())\n            command = input(\"> \").lower().split()\n            \n            if not command:\n                continue\n                \n            action = command[0]\n            \n            if action == \"go\" and len(command) > 1:\n                self.move(command[1])\n            elif action == \"take\" and len(command) > 1:\n                self.take(command[1])\n            elif action == \"use\" and len(command) > 1:\n                self.use(command[1])\n            elif action == \"inventory\":\n                if self.inventory:\n                    print(\"You have:\", \", \".join(self.inventory))\n                else:\n                    print(\"Your inventory is empty.\")\n            elif action == \"look\":\n                continue  # Just show room details again on next loop\n            elif action == \"quit\":\n                print(\"Thanks for playing!\")\n                break\n            else:\n                print(\"I don't understand that command.\")\n\n# Create and start the game\ngame = Game()\ngame.play()\n\n# Sample commands to try:\n# go north\n# take keycard\n# go east\n# use keycard\n# take floppy disk\n# go west\n# go west\n# take manual\n# use manual\n# go bookshelf\n# take algorithm",
      "difficulty": "intermediate",
      "created_by": "Roberta Williams",
      "featured": true
    }
  }
]